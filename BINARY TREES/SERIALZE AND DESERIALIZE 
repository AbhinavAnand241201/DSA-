/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.*;

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) {
            return "";
        }
        StringBuilder res = new StringBuilder();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if (node == null) {
                res.append("n ");
            } else {
                res.append(node.val).append(" ");
                queue.offer(node.left);
                queue.offer(node.right);
            }
        }
        System.out.print(res.toString());
        return res.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.isEmpty()) {
            return null;
        }
        String[] nodeValues = data.split(" ");
        TreeNode root = new TreeNode(Integer.parseInt(nodeValues[0]));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        int cursor = 0; 

        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if (!nodeValues[++cursor].equals("n")) {
                node.left = new TreeNode(Integer.parseInt(nodeValues[cursor]));
                queue.offer(node.left);
            }
          

            if (!nodeValues[++cursor].equals("n")) {
                node.right = new TreeNode(Integer.parseInt(nodeValues[cursor]));
                queue.offer(node.right);
            }
            
        }

        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
